[uwsgi]
# Django项目根目录绝对路径
chdir = /opt/valley

# 指定项目的wsgi模块: projectName.wsgi
module = valley.wsgi

# wsgi.py文件相对路径（相对于项目根目录
wsgi-file = valley/wsgi.py

# 设置项目外网访问ip和端口，端口号必须是未被占用，当与Nginx连接时使用socket选项(bind to the specified UNIX/TCP socket using default protocol)
# socket = ip:端口号 例如 127.0.0.1:8000 ip可以省略不写个人理解为0 0.0.0.0 
socket = :8000

# 设置项目外网访问ip和端口，端口号必须是未被占用，当uwsgi做web服务器时用http选项(add an http router/server on the specified address
#http = IP:Port  #外网IP:端口，

# 启动一个master进程来管理其他进程
master = True

# 开启的进程数量（spawn the specified number of workers/processes 等同于workers选项
processes = 4

# 每个进程开启的线程数（run each worker in prethreaded mode with the specified number of threads
# 由于用c语言编写,因此不用担心GIL的问题，但linux上不存在线程，线程本质来讲是伪进程(且存在上下文切换成本)，因此不建议使用
#threads = 2

# 设置harakiri超时时间 如果请求超过harakiri超时时间，中断该请求，并且立即重启处理这个请求的进程
harakiri = 120

# 守护进程的方式在后台运行uwsgi，增加web服务的稳定性，并将日志打到指定的日志文件、udp服务器，参数为日志文件的路径(实践检验发现，并没有生成AutotestPlatform.log日志文件
deamonize = /var/log/uwsgi/valley.log

# 设置内部缓冲区大小
# 设置单个请求的最大大小(包括请求体), 这个通常映射为请求头大小。默认为4k。如果需要接收更大的请求(比如一个大的cookie查询字符串)，可能需要增加该选项的大小 
# 考虑安全问题，需要根据应用进行合理配置
buffer-size = 65535

# 打开http body缓冲, 如果HTTP body的大小超过指定的限制,那么就保存到磁盘，如果开启了harakiri，则建议设置post-buffering，否则如果上传比较慢，可能被服务器拒绝。(enable post buffering)
post-buffering = 8192

# 为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被重启(reload workers after the specified amount of managed requests
max-requests = 1000

# 创建pid文件(在失去权限前)(create pidfile (before privileges drop)
# 创建的pid文件可用于重启、停止服务:
# 停止服务：uwsgi --stop [pidfile路径]
pidfile = /var/log/uwsgi/uwsgi.pid

#当服务器退出的时候自动删除unix socket文件和pid文件
vacuum = True

# 设置单个日志文件大小，单位KB，用于切分日志文件
log-maxsize = 51200

# 在每一个日志行中都打印时间信息(prefix logs with date or a strftime string）log-date选项也有同样作用
logdate=true

#设置平滑重启(直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数
# set the maximum time (in seconds) we wait for workers and other processes to die during reload/shutdown
reload-mercy    = 10 

# 限制每个uWSGI进程的虚拟内存使用大小(limit processes address space/vsz) 例中为512M
limit-as        = 512
   
# 不记录请求日志,只记录错误以及uWSGI内部消息到日志中(disable request logging
disable-logging = true     
                   
# 将日志打到一个指定的文件(set logfile/udp address)
logto = /var/log/uwsgi/uwsgi.log

# 修改代码后后自动重新加载最新代码(默认的，uwsgi本身不会立即加载修改后的文件
py-autoreload = 1

